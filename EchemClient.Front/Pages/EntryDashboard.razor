@page "/entry-dashboard"
@inject IEntryDashboardViewModel ViewModel

<!--  Top App Bar  -->
<MudAppBar Elevation="7" Color="Color.Primary">
    <LogoAppBar />
    <MudStack Row="true" Justify="Justify.FlexEnd" Style="width: 70%">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="/entries-search" StartIcon="@Icons.Material.Filled.ArrowBack">Back</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="/" StartIcon="@Icons.Material.Filled.Home">Home</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="/about" StartIcon="@Icons.Material.Filled.Info">About</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="https://github.com/echemdb" StartIcon="@Icons.Custom.Brands.GitHub">GitHub</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="https://echemdb.github.io/unitpackage/index.html" StartIcon="@Icons.Custom.FileFormats.FileDocument">Documentation</MudButton>
        <ThemeButton />
    </MudStack>
</MudAppBar>

@if (GetState() == 0)
{
    <Loading/>
}
else if (GetState() == 1)
{
    <MudStack Class="pa-10 ml-10 mr-10" AlignItems="AlignItems.Center">
        <MudStack AlignItems="AlignItems.Start" Justify="Justify.Center">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <ElementCard Element="ViewModel.Element" />
                <MudText Typo="Typo.h3" Class="ml-10"><b>(@ViewModel.Entry.We_Electrode.CrystallographicOrientation) - @ViewModel.Entry.GetElectrolyteComposition()</b></MudText>
            </MudStack>
            <MudStack Class="mt-5">
                <MudText Typo="Typo.h5"><b>echemdb identifier: @ViewModel.Entry.Name</b></MudText>
                <MudText Typo="Typo.body1" Style="text-align: justify;">@ViewModel.Entry.Citation</MudText>
                @if (!string.IsNullOrEmpty(ViewModel.Entry.Source.ExtractAbstract()))
                {
                    <MudText Class="mt-3" Typo="Typo.body1" Style="text-align: justify;">@ViewModel.Entry.Source.ExtractAbstract()</MudText>
                }
            </MudStack>
            </MudStack>
    </MudStack>
}
<!--  Entry Chart  -->
<MudStack Class="pa-5 mb-10" Row="true" AlignItems="AlignItems.Start" Justify="Justify.Center">
    <MudStack Row AlignItems="AlignItems.Center">
         <MudText Style="writing-mode: vertical-lr; transform:rotate(180deg);">j [@ViewModel.Entry.J_Unit]</MudText>
         <MudStack Style="width:700px; height:600px;" AlignItems="AlignItems.Center">
             <canvas id="mainChart"></canvas>
             <MudText>E vs. @ViewModel.Entry.Ref_Electrode.Type [@ViewModel.Entry.E_Unit]</MudText>
         </MudStack>
    </MudStack>
    @if (GetState() == 0)
    {
        <Loading />
    }
    else
    {
        <MudStack Class="mb-5" AlignItems="AlignItems.Center" Style="height:600px;">
            <EntryMetadata Entry="@ViewModel.Entry" />
        </MudStack>
    }

</MudStack>

@code {

    protected override void OnInitialized()
    {
        ViewModel.Deserialize();
    }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender) 
            { await ViewModel.DrawCVChart(); }
            else { await ViewModel.UpdateCVChart(); }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private int GetState()
    {
        if (string.IsNullOrEmpty(ViewModel.Element.Name)) { return 0; }
        else { return 1; }
    }
}
