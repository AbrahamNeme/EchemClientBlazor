@page "/entry-dashboard"
@inject IEntryDashboardViewModel ViewModel
@inject NavigationManager NavigationManager

<MudAppBar Elevation="7" Color="Color.Primary">
    <LogoAppBar />
    <MudStack Row="true" Justify="Justify.FlexEnd" Style="width: 70%">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="/" StartIcon="@Icons.Material.Filled.Home">Return to table</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="https://github.com/echemdb" StartIcon="@Icons.Custom.Brands.GitHub">GitHub</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="https://echemdb.github.io/unitpackage/index.html" StartIcon="@Icons.Custom.FileFormats.FileDocument">Documentation</MudButton>
        <ThemeButton />
    </MudStack>
</MudAppBar>

<MudStack Class="pa-10" Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
    <MudStack Style="width:650px; height:550px;">
        <canvas id="mainChart"></canvas>
    </MudStack>
    <MudStack Style="width:650px; height:550px;">
        <canvas id="refChart"></canvas>
    </MudStack>
</MudStack>

@code {

    protected override void OnInitialized()
    {
        Deserialize();
    }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender) { await ViewModel.DrawCVCharts(); }
            else { await ViewModel.UpdateCVCharts(); }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void Deserialize()
    {
        var urlParameter = NavigationManager.Uri;
        var queryString = Uri.UnescapeDataString(new Uri(urlParameter).Query.TrimStart('?'));

        if (!string.IsNullOrEmpty(queryString))
        {
            var serializedName = Uri.UnescapeDataString(queryString.Split('=')[1]);
            try
            {
                ViewModel.EntryName = JsonSerializer.Deserialize<string>(serializedName) ?? "";
            }
            catch (JsonException ex)
            {
                // Log or handle the exception
                Console.WriteLine($"Error deserializing JSON: {ex.Message}");
            }
        }
    }
}
