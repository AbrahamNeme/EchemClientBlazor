@page "/entries-search"
@inject IEntriesSearchViewModel ViewModel
@inject NavigationManager NavigationManager

<!--  Top App Bar  -->
<MudAppBar Elevation="7" Color="Color.Primary">
    <LogoAppBar />
    <MudStack Row="true" Justify="Justify.FlexEnd" Style="width: 70%">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="/" StartIcon="@Icons.Material.Filled.Home">Home</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="/about" StartIcon="@Icons.Material.Filled.Info">About</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="https://github.com/echemdb" StartIcon="@Icons.Custom.Brands.GitHub">GitHub</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="https://echemdb.github.io/unitpackage/index.html" StartIcon="@Icons.Custom.FileFormats.FileDocument">Documentation</MudButton>
        <ThemeButton />
    </MudStack>
</MudAppBar>

<MudStack Class="pa-10">
    <MudStack Row="true">
        <MudText Typo="Typo.h3"><b>Search results of:</b></MudText>
        <MudSpacer />
        
    </MudStack>
    <MudStack Class="mt-5" Row="true">
        @foreach (var element in ViewModel.Elements)
        {
            <ElementCard Element="element"/>
        }
    </MudStack>
</MudStack>

@if (state == 0)
{
    <Loading/>
}
else if (state == 1)
{
    <MudStack Class="pa-10">
        <MudDataGrid T="CVEntry" Items="@ViewModel.Entries" Filterable="true" SortMode="SortMode.Multiple" QuickFilter="@_quickFilter" Hideable="false" Hover="true"
                     FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" Groupable="true" Elevation="6">
            <ToolBarContent>
                <MudText Class="ml-5 mt-5" Typo="Typo.h4">Cyclic Voltammograms</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="CVEntry" />
                <PropertyColumn Property="x => x.Name" />
                <PropertyColumn Title="Material" Style="width:45px;" Property="x => x.We_Electrode.Material" />
                <PropertyColumn Title="Orientation" Style="width:50px;" Property="x => x.We_Electrode.CrystallographicOrientation" />
                <PropertyColumn Title="Eletrolyte" Property="x => x.GetElectrolyteComposition()" />
                <PropertyColumn Title="Year" Property="x => x.Bibliography.Year" />
                <TemplateColumn Title="Reference" Filterable="false" Sortable="false" Groupable="false">
                    <CellTemplate>
                        <MudStack Row="true">
                            <MudLink Href="@($"{context.Item.Source.Url}")" Typo="Typo.body2">article</MudLink>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Filterable="false" Sortable="false" Groupable="false">
                    <CellTemplate>
                        <MudStack Class="mr-1" Row="true">
                            <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.ShowChart" OnClick="@(e => GoToEntryDashboard(context.Item.Name))" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="CVEntry" />
            </PagerContent>
        </MudDataGrid>
    </MudStack>
}
else
{
    <MudStack Class="pa-10" AlignItems="AlignItems.Center">
        <MudStack>
            <MudText Typo="Typo.h3"><b>No entries were found</b></MudText>
        </MudStack>
    </MudStack>
}

@code {

    protected override void OnInitialized()
    {
        Deserialize();
    }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.OnInitializedAsync();
        if (ViewModel.Entries.Count > 0) { state = 1; }
        else { state = 2; }
    }

    private int state = 0;

    private void Deserialize()
    {
        var urlParameter = NavigationManager.Uri;
        var queryString = Uri.UnescapeDataString(new Uri(urlParameter).Query.TrimStart('?'));
        Console.WriteLine($"serializing JSON list: {queryString}");

        if (!string.IsNullOrEmpty(queryString))
        {
            var serializedList = Uri.UnescapeDataString(queryString.Split('=')[1]);
            try
            {
                ViewModel.Elements = JsonSerializer.Deserialize<List<Element>>(serializedList) ?? new List<Element>();
            }
            catch (JsonException ex)
            {
                // Log or handle the exception
                Console.WriteLine($"Error deserializing JSON: {ex.Message}");
            }
        }
    }

    private void GoToEntryDashboard(string entryName)
    {
        var serializedName = JsonSerializer.Serialize(entryName);
        NavigationManager.NavigateTo($"/entry-dashboard?name={Uri.EscapeDataString(serializedName)}");
    }

    private string _searchString = string.Empty;

    // quick filter - filter globally across multiple columns with the same input
    private Func<CVEntry, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.We_Electrode.Material.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.We_Electrode.CrystallographicOrientation.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Bibliography.Year} {x.GetElectrolyteComposition()}".Contains(_searchString))
            return true;

        return false;
    };
}
