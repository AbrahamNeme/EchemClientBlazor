@page "/multiplot"
@inject IMultiplotViewModel ViewModel

<!--  Top App Bar  -->
<MudAppBar Elevation="7" Color="Color.Primary">
    <LogoAppBar />
    <MudStack Row="true" Justify="Justify.FlexEnd" Style="width: 70%">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="/entries-search" StartIcon="@Icons.Material.Filled.ArrowBack">Back</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="/" StartIcon="@Icons.Material.Filled.Home">Home</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="/about" StartIcon="@Icons.Material.Filled.Info">About</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="https://github.com/echemdb" StartIcon="@Icons.Custom.Brands.GitHub">GitHub</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="color: white;" DisableElevation="true" DisableRipple="true"
                   Href="https://echemdb.github.io/unitpackage/index.html" StartIcon="@Icons.Custom.FileFormats.FileDocument">Documentation</MudButton>
        <ThemeButton />
    </MudStack>
</MudAppBar>

<MudStack Class="pa-5 mt-5" Row="true" AlignItems="AlignItems.Start" Justify="Justify.Center">
    
    <MudStack AlignItems="AlignItems.Center">
        <NormalizationPanel ViewModel="@ViewModel" OnFunctionExecuted="HandleRerender"/>
        <MudStack Class="mr-3" Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Style="width:750px; height:600px;">
            <MudText Style="writing-mode: vertical-lr; transform:rotate(180deg);">j [@ViewModel.JUnits]</MudText>
            <canvas id="@ViewModel.ChartId"></canvas>
        </MudStack>
        <MudText>E vs. @ViewModel.LegendReference [V]</MudText>
    </MudStack>
    @if (GetState())
    {
        <PaginatedMetadata Entries="@ViewModel.Entries"/>
    }
    else
    {
        <Loading />
    }
</MudStack>

@code {
    protected override void OnInitialized()
    {
        ViewModel.Deserialize();
        ViewModel.ChartId = ViewModel.GenerateRandomId();
    }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.OnInitializedAsync();
    }

    private bool draw = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (draw)
            { await ViewModel.DrawMultipleCVCharts();
                Console.WriteLine("chart drawn"); 
                draw = false;
            }
            await ViewModel.UpdateMultipleCVCharts();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private bool GetState()
    {
        if (ViewModel.Entries.Count > 1) { return true; }
        else { return false; }
    }

    private void HandleRerender()
    {
        StateHasChanged();
    }
}
